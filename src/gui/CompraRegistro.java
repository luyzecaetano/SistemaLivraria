package gui;

import dao.ClienteDAOImp;
import dao.CompraDAOImp;
import dao.LivroDAOImp;
import java.awt.Dimension;
import java.awt.FlowLayout;
import java.util.ArrayList;
import java.util.HashMap;
import java.util.List;
import java.util.Map;
import javax.swing.JButton;
import javax.swing.JComboBox;
import javax.swing.JLabel;
import javax.swing.JOptionPane;
import javax.swing.JPanel;
import modelo.Cliente;
import modelo.Livro;
import modelo.Compra;

public class CompraRegistro extends javax.swing.JFrame {

    private Map<Long, String> mapCliente = new HashMap<>();
    private Map<Long, String> mapLivro = new HashMap<>();
    private boolean editMode = false;
    private int codPedidoEditando = -1;

    // padrao: cadastrarCompraView compraView
    public CompraRegistro() {
        initComponents();
        LoadClientes();
        adicionarLinhaLivro();
    }

    //edicao
    public CompraRegistro(CompraView compraView, int codPedido) {
        initComponents();
        LoadClientes();

        editMode = true;
        codPedidoEditando = codPedido;

        LoadPedido(codPedido);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jPanel1 = new javax.swing.JPanel();
        jLabel1 = new javax.swing.JLabel();
        jLabel2 = new javax.swing.JLabel();
        cbCliente = new javax.swing.JComboBox<>();
        jLabel5 = new javax.swing.JLabel();
        fieldData = new javax.swing.JFormattedTextField();
        btnAddLinha = new javax.swing.JButton();
        btnRegistrar = new javax.swing.JButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        panelLivros = new javax.swing.JPanel();

        setDefaultCloseOperation(javax.swing.WindowConstants.DISPOSE_ON_CLOSE);
        setResizable(false);

        jLabel1.setFont(new java.awt.Font("Segoe UI", 1, 14)); // NOI18N
        jLabel1.setText("Registrar Pedido:");

        jLabel2.setText("Selecione o cliente:");

        jLabel5.setText("Data:");

        try {
            fieldData.setFormatterFactory(new javax.swing.text.DefaultFormatterFactory(new javax.swing.text.MaskFormatter("##-##-####")));
        } catch (java.text.ParseException ex) {
            ex.printStackTrace();
        }
        fieldData.setToolTipText("");

        btnAddLinha.setText("Adicionar mais livros");
        btnAddLinha.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnAddLinhaActionPerformed(evt);
            }
        });

        btnRegistrar.setText("Registrar");
        btnRegistrar.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                btnRegistrarActionPerformed(evt);
            }
        });

        panelLivros.setLayout(new javax.swing.BoxLayout(panelLivros, javax.swing.BoxLayout.Y_AXIS));
        jScrollPane1.setViewportView(panelLivros);

        javax.swing.GroupLayout jPanel1Layout = new javax.swing.GroupLayout(jPanel1);
        jPanel1.setLayout(jPanel1Layout);
        jPanel1Layout.setHorizontalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addGap(39, 39, 39)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel2)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED)
                        .addComponent(cbCliente, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE))
                    .addGroup(jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel5)
                        .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                        .addComponent(fieldData, javax.swing.GroupLayout.PREFERRED_SIZE, 100, javax.swing.GroupLayout.PREFERRED_SIZE)))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 582, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(0, 0, Short.MAX_VALUE))
            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btnAddLinha)
                        .addGap(26, 26, 26))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(btnRegistrar)
                        .addGap(33, 33, 33))
                    .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, jPanel1Layout.createSequentialGroup()
                        .addComponent(jLabel1)
                        .addGap(247, 247, 247))))
        );
        jPanel1Layout.setVerticalGroup(
            jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(jPanel1Layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1)
                .addGap(31, 31, 31)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel2)
                    .addComponent(cbCliente, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(18, 18, 18)
                .addGroup(jPanel1Layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jLabel5)
                    .addComponent(fieldData, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(12, 12, 12)
                .addComponent(btnAddLinha)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 313, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(btnRegistrar)
                .addContainerGap(27, Short.MAX_VALUE))
        );

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(28, 28, 28)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(28, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(14, 14, 14)
                .addComponent(jPanel1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    private void LoadPedido(int codPedido) {
        CompraDAOImp dao = new CompraDAOImp();
        List<Compra> compras = dao.buscaCod(codPedido);

        if (compras.isEmpty()) {
            JOptionPane.showMessageDialog(null, "Pedido não encontrado.");
            return;
        }

        Compra c = compras.get(0);

        String data = c.getData_compra();
        String[] partes = data.split("-");
        String dataFormatada = partes[2] + "-" + partes[1] + "-" + partes[0];

        fieldData.setText(dataFormatada);

        String nomeCliente = mapCliente.get(c.getId_cliente());
        cbCliente.setSelectedItem(nomeCliente);

        panelLivros.removeAll();
        for (Compra compra : compras) {
            adicionarLinhaLivroSelecionado(compra.getId_livro());
        }

        panelLivros.revalidate();
        panelLivros.repaint();
    }

    private void LoadClientes() {
        cbCliente.removeAllItems();
        mapCliente.clear();

        cbCliente.addItem("Selecione");

        ClienteDAOImp dao = new ClienteDAOImp();
        List<Cliente> clientes = dao.listar();

        for (Cliente c : clientes) {
            mapCliente.put(c.getIdcliente(), c.getNome());
            cbCliente.addItem(c.getNome());
        }
    }

    private List<Livro> LoadLivros() {
        LivroDAOImp dao = new LivroDAOImp();
        return dao.listar();
    }

    private void adicionarLinhaLivro() {
        // criação items gui
        JPanel panelLinha = new JPanel(new FlowLayout(FlowLayout.LEFT));
        panelLinha.setPreferredSize(new Dimension(575, 40));
        panelLinha.setMaximumSize(new Dimension(Integer.MAX_VALUE, 40));

        JComboBox<String> cbLivros = new JComboBox<>();

        JButton btnRemover = new JButton("Remover");
        btnRemover.addActionListener(e -> {
            panelLivros.remove(panelLinha);
            panelLivros.revalidate();
            panelLivros.repaint();
        });

        // loadLivros
        cbLivros.addItem("Selecione");

        List<Livro> livros = LoadLivros();
        for (Livro livro : livros) {
            mapLivro.put(livro.getId_livro(), livro.getTitulo());
            cbLivros.addItem(livro.getTitulo());
        }

        // exibir items gui
        panelLinha.add(javax.swing.Box.createRigidArea(new Dimension(5, 0)));
        panelLinha.add(new JLabel("Livro:"));
        panelLinha.add(cbLivros);
        panelLinha.add(btnRemover);

        panelLivros.add(panelLinha);
        panelLivros.revalidate();
        panelLivros.repaint();
    }

    private void adicionarLinhaLivroSelecionado(long idLivroSel) {
        // criação items gui
        JPanel panelLinha = new JPanel(new FlowLayout(FlowLayout.LEFT));
        panelLinha.setPreferredSize(new Dimension(575, 40));
        panelLinha.setMaximumSize(new Dimension(Integer.MAX_VALUE, 40));

        JComboBox<String> cbLivros = new JComboBox<>();

        JButton btnRemover = new JButton("Remover");
        btnRemover.addActionListener(e -> {
            panelLivros.remove(panelLinha);
            panelLivros.revalidate();
            panelLivros.repaint();
        });

        cbLivros.addItem("Selecione");

        List<Livro> livros = LoadLivros();
        long temp;
        for (Livro livro : livros) {
            mapLivro.put(livro.getId_livro(), livro.getTitulo());
            cbLivros.addItem(livro.getTitulo());
            if (livro.getId_livro() == idLivroSel) {
                temp = livro.getId_livro();
            }
        }

        String tituloLivro = mapLivro.get(idLivroSel);
        cbLivros.setSelectedItem(tituloLivro);

        // exibir items gui
        panelLinha.add(javax.swing.Box.createRigidArea(new Dimension(5, 0)));
        panelLinha.add(new JLabel("Livro:"));
        panelLinha.add(cbLivros);
        panelLinha.add(btnRemover);

        panelLivros.add(panelLinha);
        panelLivros.revalidate();
        panelLivros.repaint();
    }


    private void btnAddLinhaActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnAddLinhaActionPerformed
        adicionarLinhaLivro();
    }//GEN-LAST:event_btnAddLinhaActionPerformed

    private void btnRegistrarActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_btnRegistrarActionPerformed
        try {
            String clienteSel = (String) cbCliente.getSelectedItem();

            long idCliente = -1;
            for (Map.Entry<Long, String> entry : mapCliente.entrySet()) {
                if (entry.getValue().equals(clienteSel)) {
                    idCliente = entry.getKey();
                    break;
                }
            }
            if (idCliente == -1) {
                JOptionPane.showMessageDialog(null, "Erro ao identificar cliente.");
                return;
            }

            //validacao
            if (clienteSel == null || cbCliente.getSelectedIndex() == 0) {
                JOptionPane.showMessageDialog(null, "Selecione um cliente válido.");
                return;
            }
            if (fieldData.getText().isEmpty()) {
                JOptionPane.showMessageDialog(null, "Preencha a data da compra.");
                return;
            }
            if (panelLivros.getComponentCount() == 0) {
                JOptionPane.showMessageDialog(null, "Adicione pelo menos um livro.");
                return;
            }

            CompraDAOImp dao = new CompraDAOImp();

            List<Compra> compraLista = new ArrayList<>();

            for (int i = 0; i < panelLivros.getComponentCount(); i++) {
                JPanel linha = (JPanel) panelLivros.getComponent(i);

                for (int j = 0; j < linha.getComponentCount(); j++) {
                    if (linha.getComponent(j) instanceof JComboBox) {
                        JComboBox cbLivro = (JComboBox) linha.getComponent(j);
                        String livroSel = (String) cbLivro.getSelectedItem();

                        if (livroSel == null || cbLivro.getSelectedIndex() == 0) {
                            JOptionPane.showMessageDialog(null, "Selecione um livro.");
                            return;
                        }

                        long idLivro = -1;
                        for (Map.Entry<Long, String> entry : mapLivro.entrySet()) {
                            if (entry.getValue().equals(livroSel)) {
                                idLivro = entry.getKey();
                                break;
                            }
                        }

                        if (idLivro == -1) {
                            JOptionPane.showMessageDialog(null, "Erro ao identificar livro.");
                            return;
                        }

                        Compra compra = new Compra();
                        compra.setId_cliente(idCliente);
                        compra.setId_livro(idLivro);
                        compra.setData_compra(converterData());

                        compraLista.add(compra);
                    }
                }
            }

            if (editMode) {
                for (Compra compra : compraLista) {
                    compra.setCod_pedido(codPedidoEditando);
                }
                dao.atualizar(compraLista);
                JOptionPane.showMessageDialog(null, "Compra atualizada com sucesso.");
            } else {
                int ultimoCod = dao.buscarUltimoCod();
                int codPedido = ultimoCod + 1;

                for (Compra compra : compraLista) {
                    compra.setCod_pedido(codPedido);
                    dao.inserir(compra);
                }
                JOptionPane.showMessageDialog(null, "Compra registrada com sucesso.");
            }

            this.dispose();

        } catch (Exception ex) {
            JOptionPane.showMessageDialog(null, "Erro ao registrar compra: \n" + ex.getMessage(), "Erro", JOptionPane.ERROR_MESSAGE);
        }
    }//GEN-LAST:event_btnRegistrarActionPerformed

    private String converterData() throws Exception {
        String dataInput = fieldData.getText();

        java.text.SimpleDateFormat formatoEntrada = new java.text.SimpleDateFormat("dd-MM-yyyy");
        java.text.SimpleDateFormat formatoSaida = new java.text.SimpleDateFormat("yyyy-MM-dd");

        java.util.Date data = formatoEntrada.parse(dataInput);
        return formatoSaida.format(data);
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton btnAddLinha;
    private javax.swing.JButton btnRegistrar;
    private javax.swing.JComboBox<String> cbCliente;
    private javax.swing.JFormattedTextField fieldData;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JLabel jLabel2;
    private javax.swing.JLabel jLabel5;
    private javax.swing.JPanel jPanel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JPanel panelLivros;
    // End of variables declaration//GEN-END:variables

}
